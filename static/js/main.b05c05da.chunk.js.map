{"version":3,"sources":["assets/menu.svg","components/config.js","assets/taxiinsights-01.svg","assets/ultimate.svg","assets/python.svg","components/NavBar.js","components/Landing.js","components/ProjectCard.js","components/Projects.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","project1","title","tech","description","project2","project3","NavBar","react_default","a","createElement","className","src","menuicon","Landing","ProjectCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","config","image","Card","fluid","Image","wrapped","ui","Content","Header","Meta","Description","extra","href","Icon","name","Component","Projects","components_ProjectCard","project1img","project2img","project3img","App","components_NavBar","components_Landing","components_Projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b05c05da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/menu.efbd8f44.svg\";","module.exports = {\r\n\r\n    project1: {\r\n        title: 'Taxi Insights',\r\n        tech: 'React, PostgreSQL, Express, HTML/CSS',\r\n        description: 'Taxi Insights is an app that lets you interactively explore the NYC TLC data set.  The app features beautifully rendered Charts and Chloropleth Maps. Queries are displayed and animated in real time.'\r\n    },\r\n    project2: {\r\n        title: 'Ultimate Software™ Hackathon App ',\r\n        tech: 'Angular 2, MongoDB, Node.JS, Agile/SCRUM methods',\r\n        description: 'Ultimate Software™ official hackathon utility for assisting with event and schedule tracking during their 2017 competition',\r\n\r\n    },\r\n    project3: {\r\n        title: 'Python Tkinter PostgreSQL Developer',\r\n        tech: 'Python, ttk, PostgreSQL',\r\n        description: 'A GUI Application to interface with a local PostgreSQL database, built entirely with native Python libraries',\r\n\r\n    }\r\n};","module.exports = __webpack_public_path__ + \"static/media/taxiinsights-01.623adc1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ultimate.4ca5c249.svg\";","module.exports = __webpack_public_path__ + \"static/media/python.8700d53f.svg\";","import React from 'react';\r\nimport menuicon from '../assets/menu.svg';\r\nimport './components.scss';\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <div className = \"navbar\">\r\n        <div className = \"navbar-menu\">\r\n            <img src = {menuicon} />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport './components.scss';\r\n\r\nfunction Landing() {\r\n  return (\r\n    <div className = \"landing\">\r\n        <div className = \"header-container\">\r\n            <div className = \"header\">Hello.</div>\r\n        </div>\r\n        <div className = \"body-container\">\r\n            <div className = \"body\">My name is Jason.  I'm a full-stack developer with a passion\r\n            for Machine Learning and Data Visualization.  Scroll down to see some of my work.\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport config from './config.js';\r\n\r\n\r\nclass ProjectCard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            options: config[props.options],\r\n            image: ''\r\n        }\r\n      }\r\n      componentDidMount() {\r\n\r\n      }\r\n      render() {\r\n          return (\r\n            <Card fluid>\r\n                <Image \r\n                    src={this.props.image} \r\n                    wrapped ui={false}\r\n                     />\r\n                <Card.Content>\r\n                    <Card.Header>\r\n                        {this.state.options.title}\r\n                    </Card.Header>\r\n                    <Card.Meta>\r\n                        <span className='date'>{this.state.options.tech}</span>\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        {this.state.options.description}\r\n                    </Card.Description>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <a href = 'https://sheltered-badlands-70867.herokuapp.com/'>\r\n                        <Icon name='play' />\r\n                        Live Demo\r\n                    </a>\r\n                </Card.Content>\r\n                <Card.Content extra>\r\n                    <a>\r\n                        <Icon name='github' />\r\n                        Code\r\n                    </a>\r\n                </Card.Content>\r\n            </Card>\r\n          )\r\n      }\r\n}\r\n\r\nexport default ProjectCard;","import React, { Component } from 'react';\r\nimport ProjectCard from './ProjectCard.js';\r\nimport project1img from '../assets/taxiinsights-01.svg';\r\nimport project2img from '../assets/ultimate.svg';\r\nimport project3img from '../assets/python.svg';\r\nimport './components.scss';\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n      <div className = \"projects\">\r\n          <div className = \"header-container\">\r\n              <div className = \"header\">Projects.</div>\r\n          </div>\r\n              <div className = \"card1\">\r\n                <ProjectCard \r\n                  options = 'project1'\r\n                  image = {project1img}\r\n                  />\r\n              </div>\r\n              <hr/>\r\n              <div className = \"card2\">\r\n                <ProjectCard\r\n                  options = 'project2'\r\n                  image = {project2img}\r\n                   />\r\n              </div>\r\n              <hr/>\r\n              <div className = \"card3\">\r\n                <ProjectCard\r\n                  options = 'project3'\r\n                  image = {project3img}\r\n                   />\r\n              </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Projects;\r\n","import React from 'react';\nimport NavBar from './components/NavBar.js';\nimport LandingSection from './components/Landing.js';\nimport ProjectSection from './components/Projects.js';\n\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div>\n        <NavBar />\n        <LandingSection />\n        <ProjectSection />\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}